!!! 5
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Embrace JS Event Loop

    //- Check out 'src/bower_components/prism/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    link(href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|The+Girl+Next+Door|Lora:400,700,400italic,700italic|Raleway:400,600,900', rel='stylesheet', type='text/css')

  body

    article

      section
        h1 Embrace JS Event Loop
        h3 by @fragphace

      section
        img.bg(src="images/kermit.gif")
        div.overlay
          h1 Let's write a HTTP server!

      section
        code.language-python
          pre.
            from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

            class MyHandler(BaseHTTPRequestHandler):
                def do_GET (self):
                    self.send_response(200)
                    self.send_header('Content-type', 'text/plain')
                    self.end_headers()
                    f = open('./file.txt')
                    self.wfile.write(f.read())
                    f.close()

            server = HTTPServer(('', 8080), MyHandler)
            server.serve_forever()
            print 'Server started on port 8080'

      section
        img.bg(src="images/iron_man.gif")
        div.overlay
          h1 Now, lets test it!

      section
        code.language-bash
          pre.
            ab -n 1000 -c 10 http://127.0.0.1:8001/

            Requests per second:    1569.56 [#/sec] (mean)
            Time per request:       6.371 [ms] (mean)
            Time per request:       0.637 [ms] (mean, across all concurrent requests)

      section
        h1 Let's do the same with JavaScript

      section
        code.language-javascript
          pre.
            var http = require('http');
            var fs = require('fs');

            var server = http.createServer(function (req, res) {
                fs.readFile(__dirname + '/file.txt', function (err, text) {
                    if (err) {
                        res.writeHead('404');
                        res.write('File not found');
                        return res.end();
                    }
                    res.writeHead('200', {
                        'Content-Type': 'text/plain'
                    });
                    res.write(text);
                    res.end();
                });
            });

            server.listen(8002, function () {
                console.log('Server started on port 8002');
            });

      section
        code.language-bash
          pre.
            ab -n 1000 -c 10 http://127.0.0.1:8002/

            Requests per second:    4615.93 [#/sec] (mean)
            Time per request:       2.166 [ms] (mean)
            Time per request:       0.217 [ms] (mean, across all concurrent requests)

      section
        img.bg(src="images/nodejs_vs_apache.png")
        div.overlay
          h1 Node.js is fast
          h2 Google: node.js benchmark [your favourite language]

      section
        img.bg(src="images/wtf.jpg")
        div.overlay
            h1 WHY???

      section
        img.bg(src="images/race_accident.gif")
        div.overlay
            h1 Is JavaScript THAT fast?
            h2 (it's not)

      section
        img.bg(src="images/cat-watching.gif")
        div.overlay
            h2 You gotta ask yourself a question
            h1 What threads are doing<br>for most of the time?

      section
        img.bg(src="images/cat-sleeping.gif")
        div.overlay
            h1 They're waiting!

      section
        code.language-python
          pre.
            # class MyHandler(BaseHTTPRequestHandler):
            #     def do_GET (self):
            #         self.send_response(200)
            #         self.send_header('Content-type', 'text/plain')
            #         self.end_headers()
                      f = open('./file.txt')
            #         self.wfile.write(f.read())
            #         f.close()

      section
        img.bg.nofade(src="images/prefork.png")

      section
        img.bg(src="images/headbanging.gif")
        div.overlay
            h1 Node.js do not wait
            h2 Event loop, baby!

      section
        img.bg(src="images/monocycle.gif")
        div.overlay
            h2 It's true for browsers as well
            h1 If you JavaScript,<br>you're in Event Loop

      section
        img.bg.nofade(src="images/event_loop.png")

      section
        img.bg(src="images/wow.gif")
        div.overlay
          h1 Benefits!
          h2
            ul
              li Speed
              li No deadlocks

      section
        img.bg(src="images/dog-catch.gif")
        div.overlay
          h1 Where's the catch?
          h2 Everything's a tradeoff

      section
        img.bg(src="images/kim-carrey.gif")
        div.overlay
          h1 Callback hell!

      section
        code.language-javascript
          pre.
            fs.readFile('foo.txt', function (err, text) {
            });

      section
        code.language-javascript
          pre.
            fs.readFile('foo.txt', function (err, text) {
              if (err) { // Deal with it! }
            });

      section
        code.language-javascript
          pre.
            fs.readFile('foo.txt', function (err, text) {
              if (err) { // Deal with it! }
              redis.keys('*', function(err, keys) {
              });
            });

      section
        code.language-javascript
          pre.
            fs.readFile('foo.txt', function (err, text) {
              if (err) { // Deal with it! }
              redis.keys('*', function(err, keys) {
                if (err) { // Deal with it, AGAIN! }
              });
            });

      section
        code.language-javascript
          pre.
            fs.readFile('foo.txt', function (err, text) {
              if (err) { // Deal with it! }
              redis.keys('*', function(err, keys) {
                if (err) { // Deal with it, AGAIN! }
                db.query('SELECT * FROM product', function (err, products) {
                });
              });
            });

      section
        code.language-javascript
          pre.
            fs.readFile('foo.txt', function (err, text) {
              if (err) { // Deal with it! }
              redis.keys('*', function(err, keys) {
                if (err) { // Deal with it, AGAIN! }
                db.query('SELECT * FROM product', function (err, products) {
                  if (err) { // ARGH! }
                });
              });
            });

      section
        code.language-javascript
          pre.
            fs.readFile('foo.txt', function (err, text) {
              if (err) { // Deal with it! }
              redis.keys('*', function(err, keys) {
                if (err) { // Deal with it, AGAIN! }
                db.query('SELECT * FROM product', function (err, products) {
                  if (err) { // ARGH! }
                  // You can see where it goes...
                });
              });
            });

      section
        img.bg(src="images/atomic-bomb.gif")
        div.overlay
          h1 The Pyramid of Doom!!!

      section
        code.language-javascript
          pre.
            // Code uses jQuery to illustrate the Pyramid of Doom
            (function($) {
              $(function(){
                $("button").click(function(e) {
                  $.get("/test.json", function(data, textStatus, jqXHR) {
                    $(".list").each(function() {
                      $(this).click(function(e) {
                        setTimeout(function() {
                          alert("Hello World!");
                        }, 1000);
                      });
                    });
                  });
                });
              });
            })(jQuery);

      section
        img.bg(src="images/policeman-blow-up.gif")
        div.overlay
          h1 Na&iuml;ve approach leads to<br>the catastrophic results

      section
        img.bg(src="images/deer-wow.gif")
        div.overlay
          h2 JavaScript is one of the most expressive languages
          h1 Use the power to help yourself

      section
        code.language-javascript
          pre.
            callbackHeaven = function (fns, callback) {
                var results = [];
                var index = 0;
                var cb = function (err, result) {
                    if (err) {
                        callback(err);
                        return;
                    }
                    results.push(result);
                    index += 1;
                    if (fns[index]) {
                        fns[index].call(this, cb);
                    } else {
                        callback(null, results);
                    }
                };
                fns[0].call(this, cb);
            };

      section
        code.language-javascript
          pre.
            callbackHeaven([
                function (cb) {
                    console.log('call 1');
                    setTimeout(function () {
                        console.log('result 1');
                        cb(null, 1);
                    }, 1000)
                },
                function (cb) {
                    console.log('call 2');
                    setTimeout(function () {
                        console.log('result 2');
                        cb(null, 2);
                    }, 500);
                }
            ], function (err, results) {
                if (err) {
                    console.log(err);
                    return;
                }
                console.log(results);
            });

      section
        code.language-bash
          pre.
            $ node examples/callbackHeaven.js
            call 1
            result 1
            call 2
            result 2
            [ 1, 2 ]

      section
        img.bg(src="images/floor-jumping.gif")
        div.overlay
          h1 It's better, but...
          h2 It's only the one scenario (series)

      section
        img.bg(src="images/escalator-superman.gif")
        div.overlay
          h1 Use async.js!

      section
        code.language-javascript
          pre.
            async.series([
              // ...
            ], function (err, results) {
              // ...
            });

      section
        code.language-bash
          pre.
            $ node examples/async-series.js
            call 1
            result 1
            call 2
            result 2
            [ 1, 2 ]

      section
        code.language-javascript
          pre.
            async.parallel([
              // ...
            ], function (err, results) {
              // ...
            });

      section
        code.language-bash
          pre.
            $ node examples/async-parallel.js
            call 1
            call 2
            result 2
            result 1
            [ 1, 2 ]

      section
        code.language-javascript
          pre.
            async.waterfall([
                function (cb) {
                    console.log('call 1');
                    setTimeout(function () {
                        console.log('result 1');
                      cb(null, 1, 2);
                    }, 1000)
                  },
                function (one, two, cb) {
                    console.log(one, two);
                    console.log('call 2');
                    setTimeout(function () {
                        console.log('result 2');
                      cb(null, 3);
                    }, 500);
                }
            ], function (err, three) {
                if (err) {
                    console.log(err);
                    return;
                }
                console.log(three);
            });

      section
        code.language-bash
          pre.
            $ node examples/async-waterfall.js
            call 1
            result 1
            1 2
            call 2
            result 2
            3
      section
        img.bg(src="images/async-parallel.gif")
        div.overlay
          h1 This and more!
          h2
            a(href="https://github.com/caolan/async") https://github.com/caolan/async

      section
        img.bg(src="images/black-balls.gif")
        div.overlay
          h1 Async.js Protip #1
          h2 Use async.js + partial application

      section
        code.language-javascript
          pre.
            var add = function (a, b, callback) {
              callback(null, a + b);
            };

            async.series([
              function (cb) {
                add(1, 2, cb);
              },
              function (cb) {
                add(3, 4, cb);
              }
            ]);

      section
        code.language-javascript
          pre.
            fn = _.partial(add, 1, 2);
            // Gives you a new function
            // that's the same as add
            // with two first parameters
            // fixed to 1 and 2

            // The same as:
            fn = function (cb) {
              add(1, 2, cb);
            };

      section
        code.language-javascript
          pre.
            var add = function (a, b, callback) {
              callback(null, a + b);
            };

            async.series([
              _.partial(add, 1, 2),
              _.partial(add, 3, 4)
            ]);

      section
        img.bg(src="images/clease.gif")
        div.overlay
          h1 Async.js Protip #2
          h2
            | Writing your async functions
            br
            | USE THE CONVENTION

      section
        code.language-javascript
          pre.
            // Can't partial because callback is the first arg
            var add = function (callback, a, b) {
              callback(null, a + b);
            };

            async.series([
              function (cb) {
                add(cb, 1, 2);
              }
            ]);

      section
        code.language-javascript
          pre.
            var add = function (a, b, callback) {
              // Can't partial beacuse async will think
              // that the result it's the error
              callback(a + b);
            };

            async.series([
              function (cb) {
                add(function (result) {
                  cb(null, result);
                });
              }
            ]);

      section
        img.bg(src="images/who-rain.gif")
        div.overlay
          h1 I beg you
          h2 callback is the LAST argument
          h2 callback takes the ERROR and the RESULT

      section
        img.bg(src="images/team-fortess.gif")
        div.overlay
          h1 Is async.js the cure
          h2 for event loop pain?

      section
        img.bg(src="images/codebase-over-time.gif")
        div.overlay
          h2 Here's the thing...
          h1 Asynchronous code is contagious
          h2 Nothing can stop it

      section
        code.language-javascript
          pre.
            var add = function (a, b) {
              return a + b;
            };

            var foo (something) {
              if (something) {
                return add(1, 2);
              } else {
                return 0;
              }
            };

      section
        h1 Let's make add asynchronous

      section
        code.language-javascript
          pre.
            var add = function (a, b, callback) {
              setTimeout(function() {
                callback(null, a + b);
              }, 1000);
            };

            var foo (something) {
              if (something) {
                return add(1, 2);
              } else {
                return 0;
              }
            };

      section
        h1 And now foo is broken...

      section
        code.language-javascript
          pre.
            var add = function (a, b, callback) {
              setTimeout(function() {
                callback(null, a + b);
              }, 1000);
            };

            var foo (something, callback) {
              if (something) {
                add(1, 2, callback);
              } else {
                callback(null, 0);
              }
            };

      section
        img.bg(src="images/alice-eyeroll.gif")
        div.overlay
          h1 Asynchronous code<br>causes brain damage
          h2 It's the price for event loop

      section
        code.language-javascript
          pre.
            var add = function (a, b, callback) {
              setTimeout(function() {
                callback(null, a + b);
              }, 1000);
            };

      section
        img.bg(src="images/jumper-fail.gif")
        div.overlay
          h2 It breaks the fundandamental thing about functions
          h1 Function doesn't return the result

      section
        img.bg(src="images/printer-cat.gif")
        div.overlay
          h2 We can fix it!
          h1 Make functions return<br>something meaningful...

      section
        img.bg(src="images/arnie.gif")
        div.overlay
          h1 A promise of execution!

      section
        code.language-javascript
          pre.
            var add = function (a, b) {
              return new Promise(function (resolve, reject) {
                setTimeout(function () {
                  resolve(a + b);
                }, 1000);
              });
            };

      section
        code.language-javascript
          pre.
            var add = function (a, b) {
              return new Promise(function (resolve, reject) {
                setTimeout(function () {
                  reject(a + b);
                }, 1000);
              });
            };

            addPromise = add(1, 2);
            addPromise.done(function (result) {
              console.log(result);
            }, function (err) {
              throw err;
            });

      section
        img.bg(src="images/guy-on-pig.gif")
        div.overlay
          h1 But that's another story...
          h2
            a(href="http://www.promisejs.org/") http://www.promisejs.org/

      section
        img.bg(src="images/friends.gif")
        div.overlay
          h1 Thank you!
          h2
            a(href="http://fragphace.pl") http://fragphace.pl

      section
        img.bg(src='images/uncle_sam.jpg')
        div.overlay
          h2 If you want me to
          h1 coach you team
          h2 give me a shout!
          h2 fragphace@gmail.com

    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='bower_components/prism/components/prism-coffeescript.js')
    script(src='bower_components/prism/components/prism-python.js')
    script(src='scripts/main.js')
